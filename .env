# MCP Server Configuration
# The transport for the MCP server - either 'sse' or 'stdio' (defaults to sse if left empty)
TRANSPORT=sse

# Host to bind to if using sse as the transport (leave empty if using stdio)
# Set this to 0.0.0.0 if using Docker, otherwise set to localhost (if using uv)
HOST=0.0.0.0

# Port to listen on if using sse as the transport (leave empty if using stdio)
PORT=8051

# AI Provider Configuration
# Choose between OpenAI or GitHub Copilot for embeddings and chat
USE_QWEN_EMBEDDINGS=false
USE_QWEN_RERANKER=false
USE_COPILOT_EMBEDDINGS=true
USE_COPILOT_CHAT=true

# OpenAI API Configuration (used when USE_COPILOT_EMBEDDINGS=false or USE_COPILOT_CHAT=false)
# Get your Open AI API Key by following these instructions -
# https://help.openai.com/en/articles/4936850-where-do-i-find-my-openai-api-key
# This is for the embedding model - text-embedding-3-small will be used
OPENAI_API_KEY=your_openai_api_key_here

# GitHub Copilot Configuration (used when USE_COPILOT_EMBEDDINGS=true or USE_COPILOT_CHAT=true)
# Get your GitHub token from https://github.com/settings/tokens
# Requires Copilot subscription and appropriate permissions
#GITHUB_TOKEN=your_github_token_here

# Rate Limiting Configuration for Copilot API
# Adjust based on your usage patterns and API limits
COPILOT_REQUESTS_PER_MINUTE=60

# The LLM you want to use for summaries and contextual embeddings
# Options: gpt-4o-mini (OpenAI), gpt-4o (Copilot), gpt-4.1-nano (if available)
MODEL_CHOICE=gpt-4o

# RAG strategies - set these to "true" or "false" (default to "false")
# USE_CONTEXTUAL_EMBEDDINGS: Enhances embeddings with contextual information for better retrieval
USE_CONTEXTUAL_EMBEDDINGS=true

# USE_HYBRID_SEARCH: Combines vector similarity search with keyword search for better results
USE_HYBRID_SEARCH=true

# USE_AGENTIC_RAG: Enables code example extraction, storage, and specialized code search functionality
USE_AGENTIC_RAG=true

# USE_RERANKING: Applies cross-encoder reranking to improve search result relevance
USE_RERANKING=true

# USE_KNOWLEDGE_GRAPH: Enables AI hallucination detection and repository parsing tools using Neo4j
# If you set this to true, you must also set the Neo4j environment variables below.
USE_KNOWLEDGE_GRAPH=true

# Supabase configuration for authentication
# Get these from your Supabase project settings -> API
# https://supabase.com/dashboard/project/<your project ID>/settings/api
SUPABASE_URL=https://hkeummfhryxuvhfmoeqo.supabase.co
SUPABASE_SERVICE_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImhrZXVtbWZocnl4dXZoZm1vZXFvIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1OTY1ODQ5MiwiZXhwIjoyMDc1MjM0NDkyfQ.b5TjIGUYWDqmlmfjPd-v6vVuAOE8GlEDtVfm8wkUoYo

# Neo4j Configuration for Knowledge Graph Tools
# These are required for the AI hallucination detection and repository parsing tools
# Leave empty to disable knowledge graph functionality

# Neo4j connection URI - use bolt://localhost:7687 for local, neo4j:// for cloud instances
# IMPORTANT: If running the MCP server through Docker, change localhost to host.docker.internal
NEO4J_URI=bolt://localhost:7687

# Neo4j username (usually 'neo4j' for default installations)
NEO4J_USER=neo4j

# Neo4j password for your database instance
NEO4J_PASSWORD=mcp-crawl4ai-rag

# Web Crawling Content Configuration
# CRAWL_STATIC_CONTENT_ONLY: When true, crawls only static HTML content without JavaScript execution
# This prevents redirects and gives you the original page content (recommended for most documentation)
# Set to false for dynamic content that requires JavaScript to load properly
CRAWL_STATIC_CONTENT_ONLY=true

# Simics Source Code Integration
# CRAWL_SIMICS_SOURCE: Enable crawling of Simics DML and Python source code
CRAWL_SIMICS_SOURCE=true

# SIMICS_SOURCE_PATH: Path to the Simics packages directory
SIMICS_SOURCE_PATH=simics-7-packages-2025-38-linux64/
